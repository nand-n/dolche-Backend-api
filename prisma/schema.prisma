// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  username         String    @unique
  phone            String    @unique
  email            String    @unique
  password         String
  payments         Payment[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isAdmin          Boolean   @default(false)
  Token            Token[]
  Post             Post[]
  balance          Int?      @default(0)
  verificationCode Int?
  isVerified       Boolean   @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?

  transaction Transaction[]
  account     Account[]
  FicoScore   FicoScore[]

  creditAccount CreditAccount[]
  equb          Equb[]
  selctedEqub   SelectedEqub[]
  branch        Branch[]
  agent         Agent[]
  loan          Loan[]
}

model Payment {
  id                 String    @id @default(uuid())
  packageName        String    @db.VarChar(255)
  belogsToId         String?
  belongsTo          User?     @relation(fields: [belogsToId], references: [id])
  amount             Int?
  expiresAt          DateTime?
  subscribedAt       DateTime  @default(now())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  Package            Package?  @relation(fields: [packageId], references: [id])
  packageId          String?
  stripeClientSecret String?
}

model Package {
  id         String    @id @default(uuid())
  name       String?   @unique
  price      Int?
  timePeriod Int?
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Token {
  id    String  @id @default(uuid())
  value String? @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Post {
  id        String   @id @default(uuid())
  title     String?
  published Boolean? @default(true)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model FicoScore {
  id     String  @id @default(uuid())
  score  String?
  userId String
  user   User    @relation(fields: [userId], references: [id])
}

model Transaction {
  id               String  @id @default(uuid())
  transaction_type String?
  account          String?

  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  transactionDate DateTime @default(now())
  transactionAmt  String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  usersId String
  users   Users  @relation(fields: [usersId], references: [id])

  agentsId String
  agents   Agents   @relation(fields: [agentsId], references: [id])
  agent    Agent[]
  branch   Branch[]

  recieverId String?

  recipientId String?
  senderId    String?
  amount      Int?
}

model Account {
  id               String    @id @default(uuid())
  transaction_type String?
  from_account     String?
  to_account       String?
  decrement        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  balance Float?
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model CreditAccount {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  accountType    String
  accountNumber  String
  balance        Float
  limit          Float
  paymentHistory PaymentHistory[]
}

model PaymentHistory {
  id              String        @id @default(uuid())
  date            DateTime
  amount          Float
  creditAccountId String
  creditAccount   CreditAccount @relation(fields: [creditAccountId], references: [id])
}

model Equb {
  id                 String   @id @default(uuid())
  cretedAt           DateTime @default(now())
  amount             String?
  activate           Boolean  @default(false)
  equbName           String?
  equbType           String?
  equbMemberLimit    String?
  equbMonthlyPayment String?
  equbCretorName     String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  selctedEqub SelectedEqub[]
}

model SelectedEqub {
  id       String   @id @default(uuid())
  cretedAt DateTime @default(now())

  income          String?
  emplymnetStatus String?
  debt            String?
  legalAgreement  String?
  equbPurpose     String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  equbID String
  equb   Equb   @relation(fields: [equbID], references: [id])
}

model Agent {
  id            String       @id @default(uuid())
  cretedAt      DateTime     @default(now())
  name          String?
  phone         String?
  email         String?
  password      String?
  branchaproval Boolean      @default(false)
  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  amout         String?
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?
}

model Branch {
  id            String      @id @default(uuid())
  cretedAt      DateTime    @default(now())
  name          String?
  phone         String?
  email         String?
  adminAprival  Boolean     @default(false)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  amout         String?
  userId        String
  user          User        @relation(fields: [userId], references: [id])
}

model Loan {
  id                 String   @id @default(uuid())
  cretedAt           DateTime @default(now())
  amount             Float?
  facilitationFee    Float?
  penaltyFee         Float?
  facilitationAmount Float?
  penaltyAmount      Float?
  totalAmount        Float?
  userId             String
  user               User     @relation(fields: [userId], references: [id])
}

// Define the schema for the users table
model Users {
  id           String         @id @default(uuid())
  email        String?        @unique
  username     String?
  password     String?
  balance      Float?         @default(0)
  phone        String?        @unique
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  transactions Transactions[]
  agents       Agents[]       @relation("agent_users")
  Transaction  Transaction[]
  deposits     Deposit[]
}

// Define the schema for the transactions table
model Transactions {
  id        String    @id @default(uuid())
  type      String?
  amount    Float?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      Users     @relation(fields: [userId], references: [id])
  agentId   String?
  agent     Agents?   @relation("agent_transactions", fields: [agentId], references: [id])
}

// Define the schema for the agents table
model Agents {
  id           String         @id @unique @default(uuid())
  name         String?
  email        String?        @unique
  phone        String?        @unique
  password     String?
  balance      Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  users        Users[]        @relation("agent_users")
  transactions Transactions[] @relation("agent_transactions")
  Transaction  Transaction[]
  deposits     Deposit[]
}

model Deposit {
  id        String   @id @unique @default(uuid())
  amount    Float?
  status    String
  users     Users    @relation(fields: [userId], references: [id])
  userId    String
  agents    Agents   @relation(fields: [agentId], references: [id])
  agentId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
